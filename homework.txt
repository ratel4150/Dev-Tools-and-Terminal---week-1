How do you see the files changed within each commit from git log?
To find changed in the commits use
git log Show commits logs is the standard command

To find out which files changed in a given commit, use the git log --raw command. 
It's the fastest and simplest way to get insight into which files a commit affects.
 The git log command is underutilized in general, largely because it has so many formatting options, 
 and many users get overwhelmed by too many choices and, in some cases, unclear documentation.

The log mechanism in Git is surprisingly flexible, though, and the --raw option provides
a log of commits in your current branch, plus a list of each file that had changes made to it.

Git whatchanged
The git whatchanged command is a legacy command that predates the log function. 
Its documentation says you're not meant to use it in favor of git log --raw and implies 
it's essentially deprecated. However, I still find it a useful shortcut to (mostly) 
the same output (although merge commits are excluded), and I anticipate creating an alias for it
 should it ever be removed. If you don't need to merge commits in your log (and you probably don't, 
 if you're only looking to see files that changed), try git whatchanged as an easy mnemonic.

View changes
Not only can you see which files changed, 
but you can also make git log display exactly what changed in the files.
 Your Git log can produce an inline diff, a line-by-line display of all changes for each file,
  with the --patch option.always referring to the commit in which we have positioned the repository at the current time. Regardless of what branch we're on, what the main branch or remote main repository is called.

How do you see the contents of what changed within each file from the git log?
Using git log --follow -p bar will show the file's entire history, 
including any changes to the file when it was known as foo. 
The -p option ensures that diffs are included for each change.



What does HEAD refer to in the context of git? 
(Not to be confused with the "HEAD<<<<" one observes within merge conflict
Always referring to the commit in which we have positioned the repository at the current time. 
Regardless of what branch we're on, what the main branch or remote main repository is called.



